"""Add clustering and classification models

Revision ID: a48c06b3f189
Revises: 73cced3916c2
Create Date: 2025-10-06 10:56:35.902117

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a48c06b3f189'
down_revision = '73cced3916c2'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('clustering_runs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('workspace_id', sa.UUID(), nullable=False),
    sa.Column('run_name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('messages_analyzed', sa.Integer(), nullable=False),
    sa.Column('clusters_discovered', sa.Integer(), nullable=False),
    sa.Column('confidence_threshold', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_clustering_runs_id'), 'clustering_runs', ['id'], unique=False)
    op.create_table('discovered_clusters',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('clustering_run_id', sa.UUID(), nullable=False),
    sa.Column('cluster_name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('category', sa.String(), nullable=False),
    sa.Column('theme', sa.String(), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=False),
    sa.Column('message_count', sa.Integer(), nullable=False),
    sa.Column('business_impact', sa.Text(), nullable=True),
    sa.Column('example_messages', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('approval_status', sa.String(), nullable=False),
    sa.Column('approved_by', sa.UUID(), nullable=True),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('customer_feedback', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['clustering_run_id'], ['clustering_runs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_discovered_clusters_id'), 'discovered_clusters', ['id'], unique=False)
    op.create_table('classification_signals',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('source_cluster_id', sa.UUID(), nullable=False),
    sa.Column('workspace_id', sa.UUID(), nullable=False),
    sa.Column('signal_type', sa.String(), nullable=False),
    sa.Column('signal_name', sa.String(), nullable=False),
    sa.Column('keywords', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('patterns', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('semantic_threshold', sa.Float(), nullable=True),
    sa.Column('business_rules', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('target_category', sa.String(), nullable=False),
    sa.Column('target_theme', sa.String(), nullable=False),
    sa.Column('priority_weight', sa.Float(), nullable=False),
    sa.Column('precision', sa.Float(), nullable=True),
    sa.Column('recall', sa.Float(), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['source_cluster_id'], ['discovered_clusters.id'], ),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_classification_signals_id'), 'classification_signals', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_classification_signals_id'), table_name='classification_signals')
    op.drop_table('classification_signals')
    op.drop_index(op.f('ix_discovered_clusters_id'), table_name='discovered_clusters')
    op.drop_table('discovered_clusters')
    op.drop_index(op.f('ix_clustering_runs_id'), table_name='clustering_runs')
    op.drop_table('clustering_runs')
    # ### end Alembic commands ###